[build-system]
requires = ["setuptools>=65", "cython", "numpy>=2.0.1", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "src"}
license-files = ["LICENSE", "src/molara/Structure/periodic_table_copyright"]

[tool.setuptools.dynamic]
version = {"attr" = "molara.__version__"}

[tool.cibuildwheel.linux]
skip = ["*musllinux*"]

[tool.setuptools.package-data]
molara = ["py.typed"]

[project]
name = "Molara"
description = "A visualisation tool for chemical structures."
authors = [
    {name = "Michel Heinz"},
    {name = "Gereon Feldmann"},
    {name = "Adrian Usler", email = "adrian.usler@rwth-aachen.de"},
    {name = "Alexander Bonkowski", email = "alexander.bonkowski@rwth-aachen.de"},
]
maintainers = [
    {name = "Michel Heinz, Gereon Feldmann, Adrian Usler, Alexander Bonkowski"},
]
dependencies = [
    "PyOpenGL>=3.1.6",
    "PySide6>=6.3.0", # tests fail below
    "matplotlib>=3.6.2", # see https://github.com/matplotlib/matplotlib/pull/24158
    "numpy>=1.22",
    "pyrr>=0.10.3",
    "scipy>=1.7.0",
]
requires-python = ">=3.10"
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["analysis, science, structure, visualisation"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["version"]

[project.urls]
Repo = "https://github.com/Molara-Lab/Molara"

[project.optional-dependencies]
doc = [
    "sphinx>=4",
    "sphinx_rtd_theme>=1",
    "myst-parser"
]
tests = [
    "pytest>=7",
    "pytest-qt>=4",
    "pytest-xvfb>=3",
    "pytest-cov>=5",
    "pytest-split>=0.8.0",
]
dev = [
    "cython",
    "mypy>=1",
    "pre-commit>=3",
    "ruff>=0.5.0",
    "molara[doc]",
]
strict = [
    "PySide6==6.8.0.2",
    "numpy==2.1.2",
    "pyrr==0.10.3",
    "scipy==1.14.1",
    "cython==3.0.11",
]
compchem = [
    "cclib>=1.7",
]
crystal = [
    "pymatgen>=2024",
    "ase>=3.23",
]

[project.scripts]
molara = "molara.__main__:main"

[tool.coverage.run]
source = ["src/*"]

[tool.ruff]
exclude = ["ui_*",]
target-version = "py310"
line-length = 120
lint.select = ["ALL"]
lint.ignore = [
  "ANN101", # Missing type annotation for `self` in method
  "ERA001", # Found commented-out code
  "D203",   # 1 blank line required before class docstring (incompatible with D211)
  "D213",   # Multi-line docstring summary should start at the second line (incompatible with D212)
  "FBT001", # Boolean-typed positional argument in function definition
  "FBT002", # Boolean default positional argument in function definition
  "INP001", # File {name} is part or an implicit namespace package. Add an `__init__.py`.
  "S101",   # Use of assert detected
  ]

[tool.mypy]
exclude = ["ui_*"]
ignore_missing_imports = true
no_implicit_optional = false

[tool.pyright]
typeCheckingMode = "off"
reportPossiblyUnboundVariable = true
reportUnboundVariable = true
reportMissingImports = false
reportMissingModuleSource = false
reportInvalidTypeForm = false
exclude = ["tests"]
ignore = ["**/ui_*"]

[tool.codespell]
ignore-words-list = "nd,te,TITEL"
check-filenames = true

[tool.cythonize]
# Specify the files to be compiled by Cython
modules = [
    "src/molara/eval/aos.pyx",
    "src/molara/eval/aos.pxd",
    "src/molara/eval/mos.pyx",
    "src/molara/eval/mos.pxd",
    "src/molara/eval/generate_voxel_grid.pyx",
    "src/molara/eval/marchingcubes.pyx",
    "src/molara/rendering/cylinder.pyx",
    "src/molara/rendering/sphere.pyx",
    "src/molara/rendering/matrices.pyx",
    "src/molara/tools/mathtools.pyx",
]
# Optional: Specify include directories
include-dirs = [
    "",
    "{env:NUMPY_INCLUDE}",
]
